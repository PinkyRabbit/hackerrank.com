/*
https://www.hackerrank.com/challenges/the-indian-job/problem

Ограбление! N грабителей ворвались в главное хранилище музея с алмазами. Грабители знают, что у них мало времени, а именно, ровно G минут, пока охранник хранилища отошел. Есть и другие проблемы, огромный сейф хранилища оснащен тепловыми сенсорами, поэтому в один и тот же момент времени в сейфе не могут находиться более двух человек.

Чтобы выкрасть нужные ему алмазы, i-му грабителю нужно находиться внутри сейфа как минимум A[i] минут, 0 <= i < N, в течение непрерывного отрезка времени. Грабители хотят узнать, существует ли такой порядок действий, в котором каждый из них выкрадет нужные ему алмазы из сейфа.

Обратите внимание
Если в один и тот же момент времени один грабитель выходит из сейфа, а другой заходит, не считается, что они были в сейфе в одно и то же время. Аналогично, если последний грабитель вышел из сейфа ровно в тот момент времени, когда вернулся охранник, считается, что грабитель успеет ускользнуть.

Формат входных данных
В первой строке записано целое число T - количество тестов.
Каждый тест состоит из двух строк. В первой строке содержатся целые числа N и G - количество грабителей и время, которое будет отсутствовать охранник. Следующая строка содержит N целых чисел A[i].

Формат выходных данных
Для каждого теста выведите YES, если существует требуемый порядок действий, либо NO в противном случае.

Ограничения
1 <= T <= 20
1 <= N <= 100
0 <= G <= 1000000 (106)
0 <= A[i] <= 100

Входные данные

2
3 4
2 4 2
3 2
2 4 2
Выходные данные

YES
NO

Примечание
В первом тестовом примере грабители могут действовать следующим образом:
В момент времени t=0, грабитель_1 заходит в сейф, в момент времени t=2 он выходит из сейфа. В момент времени t=0, грабитель_2 заходит в сейф, в момент времени t=4 он выходит из сейфа. В момент времени t=2, грабитель_3 заходит в сейф, в момент времени t=4 он выходит из сейфа.

Во втором тесте не существует требуемого порядка действий.
*/
function processData(input) {
    let strings = input.split('\n');
    strings.shift();
    const result = [];
    let debug = [];
    while(strings.length){
        let current = strings.shift().split(' ');
        const guard = current[1];
        current = strings.shift().split(' ');
        let rob1 = current.shift();
        let rob2 = 0;
        if(current.length) rob2 = current.shift();
        for(let i = 0; i < guard; i++){
            if (rob1 === 0 && current.length) rob1 = current.shift()
            rob1 -= 1;
            if (rob2 === 0 && current.length) rob2 = current.shift();
            rob2 -= 1;
            debug.push([rob1, rob2, current.length]);
        }
        if(current.length === 0 && rob1 < 1 && rob2 < 1) result.push('YES');
        else result.push('NO');
    }
    const toStr = result.join('\n');
    console.log(debug);
    console.log(toStr);
    return toStr;
}

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});
